generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}


// 1. Creation de la table : Employe ////////////////////////////////
model Employe {
  id                Int       @id @default(autoincrement())
  nom               String    @db.VarChar(50)
  prenom            String    @db.VarChar(50)
  date_de_naissance DateTime
  nas               String    @unique @db.VarChar(9)
  courriel          String    @unique @db.VarChar(50)
  password          String    @db.VarChar(100)
  telephone         String    @db.VarChar(10)
  adresse           String    @db.VarChar(50)

  // Relation entre Role
  id_role           Int
  role              Role      @relation(fields: [id_role], references: [id])

  // Enregistrement des modifications
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Nom de la table
  @@map("employes")
}

// 2. Creation de la table : Role ///////////////////////////////////
model Role {
  id          Int       @id @default(autoincrement())
  titre       String    @default("Administrateur") @db.VarChar(50)
  specialite  String?   @db.VarChar(50)

  // Relation entre Employe
  id_employe  Int
  employe     Employe   @relation(fields: [id_employe], references: [id])

  // Enregistrement des modifications
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Nom de la table
  @@map("roles")
}

// 3. Creation de la table : Patient ////////////////////////////////
model Patient {
  id                 Int            @id @default(autoincrement())
  nom                String         @db.VarChar(50)
  prenom             String         @db.VarChar(50)
  date_de_naissance  DateTime
  courriel           String         @db.VarChar(50)
  telephone          String         @db.VarChar(10)
  adresse            String         @db.VarChar(50)

  // Cles etrangeres

  // Relation avec Employe
  id_employe         Int 
  employe            Employe         @relation(fields: [id_employe], references: [id])

  // Relation avec Dossier Medical
  id_dossier_medical Int
  dossierMedical     DossierMedical  @relation(fields: [id_dossier_medical], references: [id])

  // Relation avec Consultation
  id_consultation    Int
  dossierMedical     DossierMedical  @relation(fields: [id_dossier_medical], references: [id])

  // Timestamps
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")

  // Nom de la table
  @@map("patients")
}

// 4. Creation de la table : Dossier Medical ////////////////////////
model DossierMedical {
  id                  Int      @id @default(autoincrement())
  prenom_nom_mere     String? @db.VarChar(50)
  prenom_nom_pere     String? @db.VarChar(50)
  antecedant_fam      String? @db.VarChar(250)
  maladies_chronique  String? @db.VarChar(250)
  allergies           String? @db.VarChar(250)
  traitements         String? @db.VarChar(250)

  // Relation avec Patient
  id_patient          Int
  patient             Patient @relation(fields: [id_patient], references: [id])

  // Relation avec Employe
  id_employe          Int
  employe             Employe @relation(fields: [id_employe], references: [id])

  // Timestamps
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Nom de la table
  @@map("dossiers_medicaux")
}

// 5. Creation de la table : Consultation ///////////////////////////
model Consultation {
  id               Int       @id @default(autoincrement())
  date             DateTime
  diagnostic       String?   @db.VarChar(250)
  note             String?   @db.VarChar(250)
  recommendations  String?   @db.VarChar(250)
  
  // Relation avec Patient
  id_patient       Int
  patient          Patient   @relation(fields: [id_patient], references: [id])

  // Relation avec Employe
  id_employe       Int
  employe          Employe   @relation(fields: [id_employe], references: [id])

  // Enregistrement des modifications
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Nom de la table
  @@map("consultations")
}

// 6. Creation de la table : Prescription ///////////////////////////
model Prescription {
  id              Int      @id @default(autoincrement())
  medicament      String   @db.VarChar(255)
  dosage          String   @db.VarChar(255)
  quantite        Int
  note_medecin    String?  @db.Text
  renouvellement  Boolean  @default(false)

  // Relation avec Patient
  id_patient      Int
  patient         Patient  @relation(fields: [id_patient], references: [id])

  // Relation avec Employe
  id_employe      Int
  employe         Employe  @relation(fields: [id_employe], references: [id])

  // Relation avec Pharmacie
  id_pharmacie    Int
  pharmacie       Pharmacie @relation("PharmaciePrescriptions", fields: [id_pharmacie], references: [id])

  // Enregistrement des modifications
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Nom de la table
  @@map("prescriptions")
}

// 8. Creation de la table : RendezVous ///////////////////////////
model RendezVous {
  id           Int      @id @default(autoincrement())
  date_rdv     DateTime @db.Date
  heure_rdv    DateTime @db.Time
  note_medecin String?  @db.Text
  type_rdv     String   @default("consultation")
  status_rdv   String   @default("en attente")
  
  // Cles etrangeres
  id_patient   Int
  id_employe   Int
  
  // Relations
  patient      Patient @relation(fields: [id_patient], references: [id])
  employe      Employe @relation(fields: [id_employe], references: [id])

  // Enregistrement des modifications
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Nom de la table
  @@map("rendez_vous")
}

// 7. Creation de la table : Pharmacie ///////////////////////////
model Pharmacie {
  id           Int          @id @default(autoincrement())
  nom          String       @unique @db.VarChar(50)
  adresse      String       @unique @db.VarChar(50)
  telephone    String       @db.VarChar(13)
  courriel     String       @unique @db.VarChar(50)

  // Relation avec Prescription
  prescriptions Prescription[] @relation("PharmaciePrescriptions")

  // Enregistrement des modifications
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Nom de la table
  @@map("pharmacies")
}




